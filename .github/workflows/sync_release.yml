name: 'Sync Release'

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

jobs:
  sync:
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.fetch_release.outputs.release_tag }}
      release_body: ${{ steps.fetch_release.outputs.release_body }}
    steps:
      - name: Sync Release
        id: fetch_release
        run: echo `gh release list -R Remix-Design/RemixIcon  -L 1  --json tagName  -q ".[].tagName"` >> $GITHUB_OUTPUT
      - name: Fetch Release Body
        id: fetch_release_body
        run: echo `gh release list -R Remix-Design/RemixIcon  -L 1  --json body  -q ".[].body"` >> $GITHUB_OUTPUT
  check:
    runs-on: ubuntu-latest
    needs: sync
    if: ${{ needs.sync.outputs.release_tag != '' }}
    outputs:
      current_tag: ${{ steps.check.outputs.current_tag }}
    steps:
      - name: Check
        id: check
        run: echo `gh release list -L 1  --json tagName  -q ".[].tagName"` >> $GITHUB_OUTPUT
  MakeRelease:
    runs-on: ubuntu-latest
    needs: [sync, check]
    if: ${{ needs.check.outputs.current_tag != needs.sync.outputs.release_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '21'

      - name: Install dependencies
        run: npm install

      - name: Run update script
        run: node update.mjs
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.sync.outputs.release_tag }}
          release_name: ${{ needs.sync.outputs.release_tag }}
          title: ${{ needs.sync.outputs.release_tag }}
          body: ${{ needs.sync.outputs.release_body }}
          draft: false
          prerelease: false
